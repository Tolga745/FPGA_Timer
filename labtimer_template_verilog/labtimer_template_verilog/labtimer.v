/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module DIG_Counter_Nbit
#(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg [(Bits-1):0] count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module DIG_Register
(
    input C,
    input en,
    input D,
    output Q
);

    reg  state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module DIG_Sub #(
    parameter Bits = 2
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits-1):0] s,
    output c_o
);
    wire [Bits:0] temp;

    assign temp = a - b - c_i;
    assign s = temp[(Bits-1):0];
    assign c_o = temp[Bits];
endmodule

module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module labtimer (
  input CLK,
  input SW,
  input B3,
  input B2,
  input B1,
  input B0,
  input HZ1,
  output [3:0] M10,
  output [3:0] M1,
  output [3:0] S10,
  output [3:0] S1
);
  wire [3:0] M10_temp;
  wire [3:0] M1_temp;
  wire [3:0] S10_temp;
  wire [3:0] S1_temp;
  wire s0;
  wire s2;
  wire s3;
  wire [3:0] s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire [3:0] s9;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire [3:0] s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire [3:0] s21;
  wire s22;
  wire s23;
  wire [3:0] s24;
  wire [3:0] s25;
  wire [3:0] s26;
  wire [3:0] s27;
  wire [3:0] s28;
  wire [3:0] s29;
  wire [3:0] s30;
  wire [3:0] s31;
  wire s32;
  wire s33;
  wire [3:0] s34;
  wire s35;
  wire [3:0] s36;
  wire s37;
  wire [3:0] s38;
  wire [3:0] s39;
  wire s40;
  wire [3:0] s41;
  wire [3:0] s42;
  wire s43;
  wire s44;
  wire s45;
  wire s46;
  wire s47;
  wire s48;
  wire s49;
  wire s50;
  wire s51;
  wire s52;
  wire s53;
  wire s54;
  wire s55;
  wire [3:0] s56;
  wire s57;
  wire [3:0] s58;
  wire s59;
  wire [3:0] s60;
  wire [3:0] s61;
  wire s62;
  wire [3:0] s63;
  wire s64;
  wire s65;
  wire [3:0] s66;
  wire [3:0] s67;
  wire s68;
  wire s69;
  wire [3:0] s70;
  wire [3:0] s71;
  wire s72;
  wire s73;
  wire [3:0] s74;
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( B3 ),
    .C( CLK ),
    .Q( s0 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i1 (
    .D( B2 ),
    .C( CLK ),
    .Q( s6 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .D( B1 ),
    .C( CLK ),
    .Q( s12 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i3 (
    .D( B0 ),
    .C( CLK ),
    .Q( s17 )
  );
  assign s18 = ~ B0;
  assign s23 = (~ SW & HZ1);
  assign s2 = (SW & (s0 & ~ B3));
  assign s7 = (SW & (s6 & ~ B2));
  assign s13 = (SW & (s12 & ~ B1));
  assign s19 = (SW & (s17 & s18));
  assign s32 = ((SW & s18) | s23);
  DIG_Counter_Nbit #(
    .Bits(4)
  )
  DIG_Counter_Nbit_i4 (
    .en( s2 ),
    .C( CLK ),
    .clr( s3 ),
    .out( s4 )
  );
  assign s3 = (s2 & s5);
  DIG_Counter_Nbit #(
    .Bits(4)
  )
  DIG_Counter_Nbit_i5 (
    .en( s7 ),
    .C( CLK ),
    .clr( s8 ),
    .out( s9 )
  );
  assign s8 = (s7 & s11);
  DIG_Counter_Nbit #(
    .Bits(4)
  )
  DIG_Counter_Nbit_i6 (
    .en( s13 ),
    .C( CLK ),
    .clr( s14 ),
    .out( s15 )
  );
  assign s14 = (s13 & s16);
  DIG_Counter_Nbit #(
    .Bits(4)
  )
  DIG_Counter_Nbit_i7 (
    .en( s19 ),
    .C( CLK ),
    .clr( s20 ),
    .out( s21 )
  );
  assign s20 = (s19 & s22);
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i8 (
    .sel( SW ),
    .in_0( s24 ),
    .in_1( s4 ),
    .out( s25 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i9 (
    .sel( SW ),
    .in_0( s26 ),
    .in_1( s9 ),
    .out( s27 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i10 (
    .sel( SW ),
    .in_0( s28 ),
    .in_1( s15 ),
    .out( s29 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i11 (
    .sel( SW ),
    .in_0( s30 ),
    .in_1( s21 ),
    .out( s31 )
  );
  DIG_Register_BUS #(
    .Bits(4)
  )
  DIG_Register_BUS_i12 (
    .D( s25 ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( M10_temp )
  );
  DIG_Register_BUS #(
    .Bits(4)
  )
  DIG_Register_BUS_i13 (
    .D( s27 ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( M1_temp )
  );
  DIG_Register_BUS #(
    .Bits(4)
  )
  DIG_Register_BUS_i14 (
    .D( s29 ),
    .C( CLK ),
    .en( 1'b1 ),
    .Q( S10_temp )
  );
  DIG_Register_BUS #(
    .Bits(4)
  )
  DIG_Register_BUS_i15 (
    .D( s31 ),
    .C( CLK ),
    .en( s32 ),
    .Q( S1_temp )
  );
  assign s37 = (s43 & s23 & s44);
  assign s52 = (s51 & s50 & ~ SW & s49 & s48);
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i16 (
    .D( s53 ),
    .C( s23 ),
    .Q( s54 ),
    .\~Q ( s44 )
  );
  assign s59 = (s54 & s62 & s23);
  DIG_Register DIG_Register_i17 (
    .D( s52 ),
    .C( CLK ),
    .en( s52 ),
    .Q( s53 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i18 (
    .a( s4 ),
    .b( 4'b1001 ),
    .\= ( s5 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i19 (
    .a( s9 ),
    .b( 4'b1001 ),
    .\= ( s11 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i20 (
    .a( s15 ),
    .b( 4'b101 ),
    .\= ( s16 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i21 (
    .a( s21 ),
    .b( 4'b1001 ),
    .\= ( s22 )
  );
  DIG_Sub #(
    .Bits(4)
  )
  DIG_Sub_i22 (
    .a( S10_temp ),
    .b( 4'b0 ),
    .c_i( s37 ),
    .s( s38 )
  );
  DIG_Sub #(
    .Bits(4)
  )
  DIG_Sub_i23 (
    .a( S1_temp ),
    .b( 4'b1 ),
    .c_i( 1'b0 ),
    .s( s39 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i24 (
    .a( S1_temp ),
    .b( 4'b0 ),
    .\= ( s43 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i25 (
    .a( S10_temp ),
    .b( 4'b0 ),
    .\= ( s45 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i26 (
    .a( M1_temp ),
    .b( 4'b0 ),
    .\= ( s46 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i27 (
    .a( M10_temp ),
    .b( 4'b0 ),
    .\= ( s47 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i28 (
    .a( M10_temp ),
    .b( 4'b0 ),
    .\= ( s48 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i29 (
    .a( M1_temp ),
    .b( 4'b0 ),
    .\= ( s49 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i30 (
    .a( S10_temp ),
    .b( 4'b0 ),
    .\= ( s50 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i31 (
    .a( S1_temp ),
    .b( 4'b0 ),
    .\= ( s51 )
  );
  DIG_Add #(
    .Bits(4)
  )
  DIG_Add_i32 (
    .a( S10_temp ),
    .b( 4'b0 ),
    .c_i( s59 ),
    .s( s60 )
  );
  DIG_Add #(
    .Bits(4)
  )
  DIG_Add_i33 (
    .a( S1_temp ),
    .b( 4'b1 ),
    .c_i( 1'b0 ),
    .s( s61 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i34 (
    .a( S1_temp ),
    .b( 4'b1001 ),
    .\= ( s62 )
  );
  assign s40 = (s37 | s59);
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i35 (
    .a( S10_temp ),
    .b( 4'b101 ),
    .\= ( s64 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i36 (
    .sel( s54 ),
    .in_0( 4'b101 ),
    .in_1( 4'b0 ),
    .out( s66 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i37 (
    .a( M1_temp ),
    .b( 4'b1001 ),
    .\= ( s68 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i38 (
    .sel( s54 ),
    .in_0( 4'b1001 ),
    .in_1( 4'b0 ),
    .out( s70 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i39 (
    .a( M10_temp ),
    .b( 4'b1001 ),
    .\= ( s72 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i40 (
    .sel( s54 ),
    .in_0( 4'b1001 ),
    .in_1( 4'b0 ),
    .out( s74 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i41 (
    .sel( s54 ),
    .in_0( 4'b1001 ),
    .in_1( 4'b0 ),
    .out( s42 )
  );
  assign s35 = (s37 & s45 & s44);
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i42 (
    .sel( s54 ),
    .in_0( s39 ),
    .in_1( s61 ),
    .out( s41 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i43 (
    .sel( s54 ),
    .in_0( s38 ),
    .in_1( s60 ),
    .out( s63 )
  );
  assign s57 = (s59 & s64 & s54);
  DIG_Sub #(
    .Bits(4)
  )
  DIG_Sub_i44 (
    .a( M1_temp ),
    .b( 4'b0 ),
    .c_i( s35 ),
    .s( s36 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i45 (
    .sel( s40 ),
    .in_0( s41 ),
    .in_1( s42 ),
    .out( s30 )
  );
  assign s33 = (s35 & s46 & s44);
  DIG_Add #(
    .Bits(4)
  )
  DIG_Add_i46 (
    .a( M1_temp ),
    .b( 4'b0 ),
    .c_i( s57 ),
    .s( s58 )
  );
  assign s65 = (s57 | s35);
  assign s55 = (s54 & s68 & s57);
  DIG_Sub #(
    .Bits(4)
  )
  DIG_Sub_i47 (
    .a( M10_temp ),
    .b( 4'b0 ),
    .c_i( s33 ),
    .s( s34 )
  );
  DIG_Add #(
    .Bits(4)
  )
  DIG_Add_i48 (
    .a( M10_temp ),
    .b( 4'b0 ),
    .c_i( s55 ),
    .s( s56 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i49 (
    .sel( s65 ),
    .in_0( s63 ),
    .in_1( s66 ),
    .out( s28 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i50 (
    .sel( s54 ),
    .in_0( s36 ),
    .in_1( s58 ),
    .out( s67 )
  );
  assign s69 = (s55 | s33);
  assign s73 = ((s55 & s72 & s54) | (s33 & s47 & s44));
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i51 (
    .sel( s69 ),
    .in_0( s67 ),
    .in_1( s70 ),
    .out( s26 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i52 (
    .sel( s54 ),
    .in_0( s34 ),
    .in_1( s56 ),
    .out( s71 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i53 (
    .sel( s73 ),
    .in_0( s71 ),
    .in_1( s74 ),
    .out( s24 )
  );
  assign M10 = M10_temp;
  assign M1 = M1_temp;
  assign S10 = S10_temp;
  assign S1 = S1_temp;
endmodule
